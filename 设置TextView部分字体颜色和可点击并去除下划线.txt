//必须先写这个方法不然点击不会响应
tvDesc.setMovementMethod(LinkMovementMethod.getInstance());
                SpannableStringBuilder style = new SpannableStringBuilder(descs[i]);
                style.setSpan(new ClickableSpan() {
                    @Override
                    public void onClick(View widget) {
                       
                    }

                    @Override
                    public void updateDrawState(TextPaint ds) {
                        super.updateDrawState(ds);
			//修改部分字体的颜色
                        ds.setColor(getResources().getColor(R.color.color_08C2AD));
			//去除部分字体的下划线
                        ds.setUnderlineText(false);
                    }
                }, (descs[i].length() - 6), descs[i].length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);//当然这个2和6不用写死，根据实际需要来取值
                tvDesc.setText(style);

//设置不同颜色字体大小以及加载图片


 public void setTitle(ViewHolder mViewHolder, Record record) {
        String title = null;
        try {
             /*处理点击效果，新闻Item有点击效果*/
            if (isItemClicked(record.getId())) {
                mViewHolder.yanbaoTitleTv.setTextColor(READ_TITLE_COLOR);
            } else {
                mViewHolder.yanbaoTitleTv.setTextColor(TITLE_COLOR);
            }
            StringBuffer authSb = new StringBuffer();
            StringBuffer otherInfoSb = new StringBuffer();
            int otherInfoSize = 0;
            String org = record.getOrg();
            if (!TextUtils.isEmpty(org)) {
                authSb.append("<font color='#666666' size='12'>");
                authSb.append(org);
                authSb.append("</font>");
                authSb.append("&nbsp;&nbsp;&nbsp;&nbsp;");
                otherInfoSize += 2;
                otherInfoSize += org.length();
                otherInfoSb.append(org);
                otherInfoSb.append("&nbsp;&nbsp;&nbsp;&nbsp;");
            }
            List<AuthorList> authorLists = record.getAuthorList();
            if (authorLists != null) {
                int size = authorLists.size();
                for (int i = 0; i < size; i++) {
                    AuthorList authorList = authorLists.get(i);
                    if (authorList != null && i < 2) {
                        String auth = authorList.getAuth();
                        if (!TextUtils.isEmpty(auth)) {
                            authSb.append("<font color='#666666' size='12'>");
                            authSb.append(auth);
                            authSb.append("</font>");
                            otherInfoSize += auth.length();
                            otherInfoSb.append(auth);

                            String isWealth = authorList.getIsWealth();
                            if (!TextUtils.isEmpty(isWealth) && isWealth.equals("0")) {
                                authSb.append("<img src='");
                                authSb.append(R.drawable.jinpai_icon);
                                authSb.append("'/>");
                                otherInfoSize += 2;
                                otherInfoSb.append("&nbsp;&nbsp;&nbsp;&nbsp;");
                            }
                            if (size > 1 && i == 0) {
                                authSb.append("<font color='#666666' size='12'>");
                                authSb.append(",");
                                authSb.append("</font>");
                                otherInfoSize += 1;
                                otherInfoSb.append(",");
                            }
                        }
                    } else {
                        break;
                    }
                }
                if (size >= 2) {
                    authSb.append("<font color='#666666' size='12'>");
                    authSb.append("等");
                    authSb.append("</font>");
                    otherInfoSb.append("等");
                    otherInfoSize += 1;
                }
            }
            List<Attach> attaches = record.getAttach();
            if (attaches != null && attaches.size() > 0) {
                for (int i = 0; i < attaches.size(); i++) {
                    Attach attach = attaches.get(i);
                    if (i == 0 && attach != null && !TextUtils.isEmpty(attach.getPagenum())) {
                        authSb.append("<font color='#999999' size='12'>");
                        authSb.append("&nbsp;&nbsp;&nbsp;&nbsp;");
                        authSb.append(attach.getPagenum());
                        authSb.append("页");
                        authSb.append("</font>");
                        otherInfoSb.append("&nbsp;&nbsp;&nbsp;&nbsp;");
                        otherInfoSb.append(attach.getPagenum());
                        otherInfoSb.append("页");
                        otherInfoSize += 3;
                        otherInfoSize += attach.getPagenum().length();
                        break;
                    }
                }
            }
            StringBuffer totalSb = new StringBuffer();

             title = record.getTitle();
            Log.i(TAG, "title----------" + title);
            int titleSize = title.length();
            int titleWidth = getCharacterWidth(title, 17);//计算标题的宽度
            int everyWidth = titleWidth / titleSize;//计算每个字的宽度

            String otherInfo = authSb.toString();
            int otherInfoWidth = getCharacterWidth(otherInfoSb.toString(), 12);//其他信息的宽度


            //计算屏幕可显示的宽度
            int totalCanShowWidth = width - mViewHolder.yanbaoTitleTv.getPaddingLeft() - mViewHolder.yanbaoTitleTv.getPaddingRight();
            int everyScreenShowSize = totalCanShowWidth / everyWidth;//计算屏幕可以显示的字数

            //标题的总字数
            int totalSize = titleSize + otherInfoSize+10;
            int totalWidth = titleWidth + otherInfoWidth+10;
            totalSb.append("<font color='#333333' size='17'>");
            totalSb.append(title);
            totalSb.append("</font>");
            if (totalCanShowWidth>=totalWidth&&everyScreenShowSize>=totalSize) {//一行的情况
                totalSb.append("&nbsp;&nbsp;&nbsp;&nbsp;");
            } else if(totalCanShowWidth<totalWidth&&everyScreenShowSize<totalSize&&totalWidth<2*totalCanShowWidth){//两行
                totalSb.append("&nbsp;&nbsp;&nbsp;&nbsp;");
            } else if(Math.abs((titleWidth-everyScreenShowSize))>otherInfoWidth){
                totalSb.append("&nbsp;&nbsp;&nbsp;&nbsp;");
            } else  {
                totalSb.append("<br/>");
            }
            totalSb.append(otherInfo);
            Log.i(TAG, "otherInfo----------" + otherInfo);
            Log.i(TAG, "totalSb----------" + totalSb.toString());
            mViewHolder.yanbaoTitleTv.setText(Html.fromHtml(totalSb.toString(),new ProImageGetter(),null));
            mViewHolder.yanbaoTitleTv.setVisibility(View.VISIBLE);
        } catch (Exception e) {
            Log.i(TAG, "异常了标题----------");
            if(!TextUtils.isEmpty(title)){
                StringBuffer tit = new StringBuffer();
                tit.append("<font color='#333333' size='17'>");
                tit.append(title);
                tit.append("</font>");
                mViewHolder.yanbaoTitleTv.setText(Html.fromHtml(tit.toString()));
                mViewHolder.yanbaoTitleTv.setVisibility(View.VISIBLE);
            } else {
                mViewHolder.yanbaoTitleTv.setVisibility(View.GONE);
            }

        }

    }



    /**
     * 本地图片
     * @author Susie
     */
    private final class LocalImageGetter implements Html.ImageGetter{

        @Override
        public Drawable getDrawable(String source) {
            // 获取本地图片
            Drawable drawable = Drawable.createFromPath(source);
            // 必须设为图片的边际,不然TextView显示不出图片
            drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
            // 将其返回
            return drawable;
        }
    }
    /**
     * 项目资源图片
     * @author Susie
     */
    private final class ProImageGetter implements Html.ImageGetter{

        @Override
        public Drawable getDrawable(String source) {
            // 获取到资源id
            int id = Integer.parseInt(source);
            Drawable drawable = mContext.getResources().getDrawable(id);
            drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
            return drawable;
        }
    }
 /** 
     * 网络图片 
     * @author Susie 
     */  
    private final class NetworkImageGetter implements Html.ImageGetter{  
  
        @Override  
        public Drawable getDrawable(String source) {  
              
            Drawable drawable = null;  
            // 封装路径  
            File file = new File(Environment.getExternalStorageDirectory(), picName);  
            // 判断是否以http开头  
            if(source.startsWith("http")) {  
                // 判断路径是否存在  
                if(file.exists()) {  
                    // 存在即获取drawable  
                    drawable = Drawable.createFromPath(file.getAbsolutePath());  
                    drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());  
                } else {  
                    // 不存在即开启异步任务加载网络图片  
                    AsyncLoadNetworkPic networkPic = new AsyncLoadNetworkPic();  
                    networkPic.execute(source);  
                }  
            }  
            return drawable;  
        }  
    }  
    /** 
     * 加载网络图片异步类 
     * @author Susie 
     */  
    private final class AsyncLoadNetworkPic extends AsyncTask<String, Integer, Void>{  
  
        @Override  
        protected Void doInBackground(String... params) {  
            // 加载网络图片  
            loadNetPic(params);  
            return null;  
        }  
          
        @Override  
        protected void onPostExecute(Void result) {  
            super.onPostExecute(result);  
            // 当执行完成后再次为其设置一次  
            mTvThree.setText(Html.fromHtml(htmlThree, mImageGetter, null));  
        }  
        /**加载网络图片*/  
        private void loadNetPic(String... params) {  
            String path = params[0];  
              
            File file = new File(Environment.getExternalStorageDirectory(), picName);  
              
            InputStream in = null;  
              
            FileOutputStream out = null;  
              
            try {  
                URL url = new URL(path);  
                  
                HttpURLConnection connUrl = (HttpURLConnection) url.openConnection();  
                  
                connUrl.setConnectTimeout(5000);  
                  
                connUrl.setRequestMethod("GET");  
                  
                if(connUrl.getResponseCode() == 200) {  
                      
                    in = connUrl.getInputStream();  
                      
                    out = new FileOutputStream(file);  
                      
                    byte[] buffer = new byte[1024];  
                      
                    int len;  
                      
                    while((len = in.read(buffer))!= -1){  
                        out.write(buffer, 0, len);  
                    }  
                } else {  
                    Log.i(TAG, connUrl.getResponseCode() + "");  
                }  
            } catch (Exception e) {  
                e.printStackTrace();  
            } finally {  
                  
                if(in != null) {  
                    try {  
                        in.close();  
                    } catch (IOException e) {  
                        e.printStackTrace();  
                    }  
                }  
                if(out != null) {  
                    try {  
                        out.close();  
                    } catch (IOException e) {  
                        e.printStackTrace();  
                    }  
                }  
            }  
        }  
    }  
}  